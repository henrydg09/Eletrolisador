function eletrolisador_PEM()
 % Parâmetros constantes
 R = 8.314;            % Constante universal dos gases [J/(mol·K)]
 F = 96485.3;          % Constante de Faraday [C/mol]
 Z = 2;                % Número de elétrons envolvidos
 V_rev = 1.229;        % Tensão reversível [V]
 eta = 1;           % Eficiência faradaica assumida
 massamolar = 2.016e-3;  % Massa molar do hidrogênio [kg/mol]
 HHV = 141480000;         % Poder calorífico superior [J/kg]
 % Parâmetros de ativação
 alpha_cat = 0.5;      % Coeficiente de transferência de carga do cátodo
 alpha_an = 0.5;       % Coeficiente de transferência de carga do ânodo
 j0_cat = 0.278;        % Densidade de corrente de troca no cátodo [A/cm²]
 j0_an = 1e-5;         % Densidade de corrente de troca no ânodo [A/cm²]
 % Parâmetros de resistência ôhmica
 R_ele = 0;     % Resistência elétrica [ohm·cm²]
 t_mem = 0.0178;       % Espessura da membrana [cm]
 lambda = 22;          % Parâmetro de hidratação
 % Temperatura da célula em graus Celsius
 T_celsius = 60;
 T_cell = T_celsius + 273.15;  % Temperatura em Kelvin
 % Área do eletrodo
 area_eletrodo = 6000; % em cm²
 % Número de placas (células) no eletrolisador
 num_placas = 24*25;  % Defina o número de placas desejado

 j_values = 0.1:0.1:2.44;  % Densidade de corrente de 0,1 a 2.44 A/cm²
 % Calcular resultados
 [V_cell_values, H2_production_kg_s, H2_production_kg_h, H2_production_L_min, eficiencia_energetica, V_rev_values, V_act_an_values, V_act_cat_values, V_ohm_values] = ...
     calcularResultados(j_values, area_eletrodo, num_placas, R, F, Z, V_rev, eta, massamolar, ...
                        alpha_cat, alpha_an, j0_cat, j0_an, R_ele, t_mem, lambda, T_cell, HHV);
 % Plotar resultados
 plotResultados(j_values, V_cell_values, H2_production_kg_h, eficiencia_energetica);
end
function [V_cell_values, H2_production_kg_s, H2_production_kg_h, H2_production_L_min, eficiencia_energetica, V_rev_values, V_act_an_values, V_act_cat_values, V_ohm_values] = ...
 calcularResultados(j_values, area_eletrodo, num_placas, R, F, Z, V_rev, eta, massamolar, ...
                    alpha_cat, alpha_an, j0_cat, j0_an, R_ele, t_mem, lambda, T_cell, HHV)
  % Inicializar vetores para armazenar os resultados
 V_cell_values = zeros(size(j_values));       % Tensão da célula
 H2_production_kg_s = zeros(size(j_values));  % Produção de H2 em kg/s
 H2_production_kg_h = zeros(size(j_values));  % Produção de H2 em kg/h
H2_production_L_min = zeros(size(j_values));  % Produção de H2 em L/min
 eficiencia_energetica = zeros(size(j_values));    % Eficiência energética
 % Inicializar vetores para as contribuições de tensão
 V_rev_values = zeros(size(j_values));       % Tensão reversível
 V_act_an_values = zeros(size(j_values));    % Sobretensão de ativação do ânodo
 V_act_cat_values = zeros(size(j_values));    % Sobretensão de ativação do cátodo
 V_ohm_values = zeros(size(j_values));        % Sobretensão ôhmica
 % Densidade do hidrogênio em kg/L
 densidade_H2 = 0.00008988;  % kg/L
 % Loop para calcular a tensão da célula, produção de H2 e eficiência
 for i = 1:length(j_values)
     j = j_values(i);  % Densidade de corrente atual
  
     % Cálculo da corrente total (considerando o número de placas)
     I_total = j * area_eletrodo * num_placas;  % Corrente total (A)
  
     % Cálculo da resistência iônica (R_ion)
     R_ion = t_mem / (((0.005139 * lambda) - 0.00326) * exp(1268 * ((1/303) - (1/T_cell))));
     
    % Sobretensão de ativação
     V_act_an = (R * T_cell / (alpha_an * Z * F)) * log(j / j0_an);
     V_act_cat = abs(-(R * T_cell) / (alpha_cat * Z * F) * log(j / j0_cat));
     % Sobretensão ôhmica
     V_ohm = j * (R_ele + R_ion);
  
     % Tensão da célula (V_cell)
     V_cell = V_rev + V_act_an + V_act_cat + V_ohm;
  
     % Produção de H2 em kg/s
     Q_H2_kg_s = ( I_total * eta * massamolar) / (2 * F);  % kg/s
  
     % Conversão para kg/h
     Q_H2_kg_h = Q_H2_kg_s * 3600;  % kg/s para kg/h
  
     % Conversão para L/min
     Q_H2_L_min = (Q_H2_kg_s / densidade_H2) * 60;  % kg/s para L/min
  
     % Armazenar os resultados
     V_cell_values(i) = V_cell;
     H2_production_kg_s(i) = Q_H2_kg_s;  % Armazenar produção em kg/s
     H2_production_kg_h(i) = Q_H2_kg_h;  % Armazenar produção em kg/h
     H2_production_L_min(i) = Q_H2_L_min;  % Armazenar produção em L/min
  
     % Energia elétrica consumida
     energia_eletrica = V_cell * I_total;  % Energia elétrica consumida em J
  
     % Energia química do H2 produzido
     energia_quimica_H2 = HHV * H2_production_kg_s(i);  % Energia química do H2 produzido
  
     % Eficiência energética corrigida
     eficiencia_energetica(i) = (energia_quimica_H2 / energia_eletrica) * 100; % Eficiência energética
     % Armazenar as contribuições de tensão
     V_rev_values(i) = V_rev;
     V_act_an_values(i) = V_act_an;
     V_act_cat_values(i) = V_act_cat;
     V_ohm_values(i) = V_ohm;
     % Impressão dos resultados para depuração
     fprintf('j: %.2f, I_total: %.2f, V_cell: %.2f, Q_H2: %.6f kg/s, energia_eletrica: %.2f, energia_quimica_H2: %.2f, eficiencia: %.2f%%\n', ...
         j, I_total, V_cell, Q_H2_kg_s, energia_eletrica, energia_quimica_H2, eficiencia_energetica(i));
 end
end
function plotResultados(j_values, V_cell_values, H2_production_kg_h, eficiencia_energetica)
 % Gráfico 1: Tensão da Célula
 figure;
 plot(j_values, V_cell_values, 'b-o');
 title('Tensão da Célula vs Densidade de Corrente');
 xlabel('Densidade de Corrente (A/cm²)');
 ylabel('Tensão (V)');
 grid on;
  % Gráfico 2: Produção de H2 (kg/h)
 figure;
 plot(j_values, H2_production_kg_h, 'r-o');
 title('Produção de H2 vs Densidade de Corrente');
 xlabel('Densidade de Corrente (A/cm²)');
 ylabel('Produção de H2 (kg/h)');
 grid on;
  % Gráfico 3: Eficiência Energética
 figure;
 plot(j_values, eficiencia_energetica, 'g-o');
 title('Eficiência Energética vs Densidade de Corrente');
 xlabel('Densidade de Corrente (A/cm²)');
 ylabel('Eficiência Energética (%)');
 grid on;
end


